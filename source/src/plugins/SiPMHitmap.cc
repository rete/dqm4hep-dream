/// \file SiPMHitmap.cc
/*
 *
 * SiPMHitmap.cc source template automatically generated by a class generator
 * Creation date : 13 june 2018
 *
 * This file is part of dqm4hep-dream libraries.
 *
 * dqm4hep-dream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dqm4hep-dream.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @author Tom Coates
 * @copyright 2018
 */

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/RootHeaders.h>
#include <dqm4hep/Module.h>
#include "dqm4hep/PluginManager.h"
#include "dqm4hep/OnlineElement.h"
#include "dqm4hep/ModuleApi.h"

namespace dqm4hep {

  namespace dream {
    
    class SiPMHitmap : public dqm4hep::online::AnalysisModule {
    public:
      SiPMHitmap() = default;
      SiPMHitmap(const SiPMHitmap&) = delete;
      SiPMHitmap& operator=(const SiPMHitmap&) = delete;
      
    private:
      void readSettings(const core::TiXmlHandle &handle) override;
      void initModule() override;
      void startOfRun(core::Run &run) override;
      void startOfCycle() override;
      void endOfCycle(const online::EOCCondition &condition) override;
      void endOfRun(const core::Run &run) override;
      void endModule() override;
      void process(core::EventPtr event) override;
      
    private:
      online::OnlineElementPtr m_pHitmap = {nullptr};
    };
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::readSettings(const core::TiXmlHandle &xmlHandle) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::initModule() {

      m_pHitmap = online::ModuleApi::getMonitorElement(this, "/", "Hitmap");

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::startOfRun(core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::startOfCycle() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::endOfCycle(const online::EOCCondition &/*condition*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::endOfRun(const core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMHitmap::endModule() {

    }
    
    //-------------------------------------------------------------------------------------------------

    void SiPMHitmap::process(core::EventPtr pEvent) {

      if(nullptr == pEvent) {
	dqm_warning("Event pointer is invalid - skipping this event");
	return;
      }

      if (pEvent->getEventNumber()%1000 == 0) {
	dqm_info("Analysis module reports: event {0}",pEvent->getEventNumber());
      }

      std::vector<float> eventChannels;
      core::GenericEvent *pGenericEvent = pEvent->getEvent<core::GenericEvent>();
      pGenericEvent->getValues("Channels", eventChannels);
      
      int i = 0;
      int j = 0;
      int channelNum = 0;

      for(i=0; i<8; i++) {
	for(j=0;j<8; j++) {
	  m_pHitmap->objectTo<TH2I>()->Fill(i,j,eventChannels[channelNum]);
	  channelNum++;
	}
      }

    }
    
    DQM_PLUGIN_DECL(SiPMHitmap, "SiPMHitmap");
    
  }
  
}
