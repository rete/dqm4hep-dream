/// \file SiPMChannelSpectra.cc
/*
 *
 * SiPMChannelSpectra.cc source template automatically generated by a class generator
 * Creation date : 13 june 2018
 *
 * This file is part of dqm4hep-dream libraries.
 *
 * dqm4hep-dream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dqm4hep-dream.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @author Tom Coates
 * @copyright 2018
 */

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/RootHeaders.h>
#include <dqm4hep/Module.h>
#include "dqm4hep/PluginManager.h"
#include "dqm4hep/OnlineElement.h"
#include "dqm4hep/ModuleApi.h"

namespace dqm4hep {

  namespace dream {
    
    class SiPMChannelSpectra : public dqm4hep::online::AnalysisModule {
    public:
      SiPMChannelSpectra() = default;
      SiPMChannelSpectra(const SiPMChannelSpectra&) = delete;
      SiPMChannelSpectra& operator=(const SiPMChannelSpectra&) = delete;
      
    private:
      void readSettings(const core::TiXmlHandle &handle) override;
      void initModule() override;
      void startOfRun(core::Run &run) override;
      void startOfCycle() override;
      void endOfCycle(const online::EOCCondition &condition) override;
      void endOfRun(const core::Run &run) override;
      void endModule() override;
      void process(core::EventPtr event) override;
      
    private:
      std::vector<online::OnlineElementPtr> m_pSpectrum = {nullptr};
      /*
      online::OnlineElementPtr m_pSpectrum0 = {nullptr};
      online::OnlineElementPtr m_pSpectrum1 = {nullptr};
      online::OnlineElementPtr m_pSpectrum2 = {nullptr};
      online::OnlineElementPtr m_pSpectrum3 = {nullptr};
      online::OnlineElementPtr m_pSpectrum4 = {nullptr};
      online::OnlineElementPtr m_pSpectrum5 = {nullptr};
      online::OnlineElementPtr m_pSpectrum5 = {nullptr};
      online::OnlineElementPtr m_pSpectrum6 = {nullptr};
      online::OnlineElementPtr m_pSpectrum7 = {nullptr};
      online::OnlineElementPtr m_pSpectrum8 = {nullptr};
      online::OnlineElementPtr m_pSpectrum9 = {nullptr};
      online::OnlineElementPtr m_pSpectrum10 = {nullptr};
      online::OnlineElementPtr m_pSpectrum11 = {nullptr};
      online::OnlineElementPtr m_pSpectrum12 = {nullptr};
      online::OnlineElementPtr m_pSpectrum13 = {nullptr};
      online::OnlineElementPtr m_pSpectrum14 = {nullptr};
      online::OnlineElementPtr m_pSpectrum15 = {nullptr};
      online::OnlineElementPtr m_pSpectrum15 = {nullptr};
      online::OnlineElementPtr m_pSpectrum16 = {nullptr};
      online::OnlineElementPtr m_pSpectrum17 = {nullptr};
      online::OnlineElementPtr m_pSpectrum18 = {nullptr};
      online::OnlineElementPtr m_pSpectrum19 = {nullptr};
      online::OnlineElementPtr m_pSpectrum20 = {nullptr};
      online::OnlineElementPtr m_pSpectrum21 = {nullptr};
      online::OnlineElementPtr m_pSpectrum22 = {nullptr};
      online::OnlineElementPtr m_pSpectrum23 = {nullptr};
      online::OnlineElementPtr m_pSpectrum24 = {nullptr};
      online::OnlineElementPtr m_pSpectrum25 = {nullptr};
      online::OnlineElementPtr m_pSpectrum25 = {nullptr};
      online::OnlineElementPtr m_pSpectrum26 = {nullptr};
      online::OnlineElementPtr m_pSpectrum27 = {nullptr};
      online::OnlineElementPtr m_pSpectrum28 = {nullptr};
      online::OnlineElementPtr m_pSpectrum29 = {nullptr};
      online::OnlineElementPtr m_pSpectrum30 = {nullptr};
      online::OnlineElementPtr m_pSpectrum31 = {nullptr};
      online::OnlineElementPtr m_pSpectrum32 = {nullptr};
      online::OnlineElementPtr m_pSpectrum33 = {nullptr};
      online::OnlineElementPtr m_pSpectrum34 = {nullptr};
      online::OnlineElementPtr m_pSpectrum35 = {nullptr};
      online::OnlineElementPtr m_pSpectrum35 = {nullptr};
      online::OnlineElementPtr m_pSpectrum36 = {nullptr};
      online::OnlineElementPtr m_pSpectrum37 = {nullptr};
      online::OnlineElementPtr m_pSpectrum38 = {nullptr};
      online::OnlineElementPtr m_pSpectrum39 = {nullptr};
      online::OnlineElementPtr m_pSpectrum40 = {nullptr};
      online::OnlineElementPtr m_pSpectrum41 = {nullptr};
      online::OnlineElementPtr m_pSpectrum42 = {nullptr};
      online::OnlineElementPtr m_pSpectrum43 = {nullptr};
      online::OnlineElementPtr m_pSpectrum44 = {nullptr};
      online::OnlineElementPtr m_pSpectrum45 = {nullptr};
      online::OnlineElementPtr m_pSpectrum45 = {nullptr};
      online::OnlineElementPtr m_pSpectrum46 = {nullptr};
      online::OnlineElementPtr m_pSpectrum47 = {nullptr};
      online::OnlineElementPtr m_pSpectrum48 = {nullptr};
      online::OnlineElementPtr m_pSpectrum49 = {nullptr};
      online::OnlineElementPtr m_pSpectrum50 = {nullptr};
      online::OnlineElementPtr m_pSpectrum51 = {nullptr};
      online::OnlineElementPtr m_pSpectrum52 = {nullptr};
      online::OnlineElementPtr m_pSpectrum53 = {nullptr};
      online::OnlineElementPtr m_pSpectrum54 = {nullptr};
      online::OnlineElementPtr m_pSpectrum55 = {nullptr};
      online::OnlineElementPtr m_pSpectrum55 = {nullptr};
      online::OnlineElementPtr m_pSpectrum56 = {nullptr};
      online::OnlineElementPtr m_pSpectrum57 = {nullptr};
      online::OnlineElementPtr m_pSpectrum58 = {nullptr};
      online::OnlineElementPtr m_pSpectrum59 = {nullptr};
      online::OnlineElementPtr m_pSpectrum60 = {nullptr};
      online::OnlineElementPtr m_pSpectrum61 = {nullptr};
      online::OnlineElementPtr m_pSpectrum62 = {nullptr};
      online::OnlineElementPtr m_pSpectrum63 = {nullptr};
      */
    };
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMChannelSpectra::readSettings(const core::TiXmlHandle &xmlHandle) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMChannelSpectra::initModule() {

      for (int i=0; i<64; i++) {
	std::string meName = "SpectrumCh" + std::to_string(i);
	m_pSpectrum[i] = online::ModuleApi::getMonitorElement(this, "/", meName);
      }

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMChannelSpectra::startOfRun(core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMChannelSpectra::startOfCycle() {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMChannelSpectra::endOfCycle(const online::EOCCondition &/*condition*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMChannelSpectra::endOfRun(const core::Run &/*run*/) {

    }
    
    //-------------------------------------------------------------------------------------------------
    
    void SiPMChannelSpectra::endModule() {

    }
    
    //-------------------------------------------------------------------------------------------------

    void SiPMChannelSpectra::process(core::EventPtr pEvent) {

      if(nullptr == pEvent) {
	dqm_warning("Event pointer is invalid - skipping this event");
	return;
      }

      if (pEvent->getEventNumber()%1000 == 0) {
	dqm_info("Analysis module reports: event {0}",pEvent->getEventNumber());
      }

      std::vector<float> eventChannels;
      core::GenericEvent *pGenericEvent = pEvent->getEvent<core::GenericEvent>();
      pGenericEvent->getValues("Channels", eventChannels);
      

      for (int i=0; i<64; i++) {
	m_pSpectrum[i]->objectTo<TH1>()->Fill(eventChannels[i]);
      }

    }
    
    DQM_PLUGIN_DECL(SiPMChannelSpectra, "SiPMChannelSpectra");
    
  }
  
}
